@{
    ViewData["Title"] = "Guest Menu";
}
<style>
    .cart-fixed-bottom {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        background-color: #343a40;
        color: white;
        padding: 10px 20px;
        text-align: center;
        display: none; /* Initially hidden */
        cursor: pointer;
    }

    /* Navbar styles */
    .custom-navbar {
        background-color: #2C3E50; /* Dark blue color */
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1);
        border-radius: 15px; /* Rounded corners */
    }


        .custom-navbar .navbar-nav .nav-link {
            font-family: 'Roboto', sans-serif;
            color: #FFFFFF; /* Changed color to white */
            font-weight: 500;
            transition: color 0.3s ease;
        }

            .custom-navbar .navbar-nav .nav-link:hover, .custom-navbar .navbar-nav .nav-link:focus {
                color: #3498DB; /* Bright blue color for hover effect */
            }

        .custom-navbar .navbar-toggler-icon {
            filter: invert(80%); /* Adjust color for better visibility against dark background */
        }

    /* Card styles */
    .card {
        margin-bottom: 30px;
        transition: all 0.3s ease;
    }

        .card:hover {
            transform: scale(1.05);
            box-shadow: 0 0 40px rgba(0,0,0,0.1);
        }

    .card-img-top {
        width: 100%;
        height: auto;
        object-fit: cover;
    }

    .card-title {
        font-size: 1.2em;
        font-weight: bold;
    }

    .card-text {
        color: #666;
    }

    .card-img-top {
        width: 100%;
        height: 200px; /* You can set this to whatever height you prefer */
        object-fit: cover;
    }

    /* Category Heading */
    #menu-container > div > h2 {
        border-bottom: 2px solid #333;
        padding-bottom: 10px;
        margin-bottom: 20px;
        font-size: 1.5em;
    }

    .outlet-header {
        margin: 40px 0; /* Adds a bit of space above and below */
    }

    #outlet-name {
        font-family: 'Roboto', sans-serif;
        text-align: center;
        font-size: 2em;
        font-weight: 700;
        margin-bottom: 15px;
    }

    #outlet-logo {
        border-radius: 50%; /* Makes the logo circular, remove if not desired */
        box-shadow: 0px 0px 15px rgba(0,0,0,0.1); /* Adds a subtle shadow to the logo for depth */
    }

</style>
<h1>Authenticated</h1>
<div class="outlet-header d-flex flex-column justify-content-center align-items-center">
    <h1 id="outlet-name" class="mb-3"></h1>
    <img id="outlet-logo" src="" alt="Outlet Logo" style="display: none; max-width: 150px; margin-top: 20px;">
</div>
<nav class="navbar navbar-expand-lg custom-navbar">
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse d-flex justify-content-center" id="navbarNav">
        <ul class="navbar-nav" id="category-navbar">
            <!-- Categories will be filled here by JavaScript -->
        </ul>
    </div>
</nav>
<!-- Container for menu items -->
<div id="menu-container">
    <!-- This will be populated by JavaScript -->
</div>
<div id="cart-button" class="cart-fixed-bottom">
    <span id="cart-items-count">0</span> Items - LKR <span id="cart-total">0.00</span>
</div>

<script>
    $(document).ready(function () {
        let outletId = '@ViewBag.OutletId';

        function fetchAndDisplayMenuItems() {
            let apiEndpoint = `https://localhost:7115/api/MenuApi/GetMenuItems/${outletId}`;
            $.get(apiEndpoint, function (menuItems) {
                let categoryMap = {};
                let navbarItems = '';

                menuItems.forEach(menuItem => {
                    if (!categoryMap[menuItem.categoryName]) {
                        categoryMap[menuItem.categoryName] = [];
                    }
                    categoryMap[menuItem.categoryName].push(menuItem);
                });

                let menuHtml = '';

                Object.keys(categoryMap).forEach((category, index) => {
                    navbarItems += `<li class="nav-item"><a class="nav-link" href="#${category}">${category}</a></li>`;

                    menuHtml += `<div id="${category}">
                               <h2>${category}</h2>
                               <div class="row">`;

                    categoryMap[category].forEach(menuItem => {
                        const imageBase64 = menuItem.image;
                        const outletId = '@ViewBag.OutletId';
                        const tableId = '@ViewBag.TableId';
                        menuHtml += `<div class="col-md-4">
                                      <div class="card" data-item-id="${menuItem.id}" data-outlet-id="${outletId}" data-table-id="${tableId}">
                                   <img src="data:image/png;base64,${imageBase64}" class="card-img-top" alt="${menuItem.name}">
                                   <div class="card-body">
                                     <h5 class="card-title">${menuItem.name} - $${menuItem.price.toFixed(2)}</h5>
                                     <p class="card-text">${menuItem.description}</p>
                                   </div>
                                 </div>
                               </div>`;
                    });

                    menuHtml += ` </div>
                            </div>`;
                });

                $('#category-navbar').html(navbarItems);
                $('#menu-container').html(menuHtml);
            })
                .fail(function (jqXHR, textStatus, errorThrown) {
                    console.log("Request failed:", textStatus, errorThrown);
                });
        }
        function fetchAndDisplayOutletInfo() {
            let outletInfoEndpoint = `https://localhost:7115/api/MenuApi/outletInfo/${outletId}`;

            console.log(`Fetching data from endpoint: ${outletInfoEndpoint}`); // Logs the endpoint being hit.

            $.get(outletInfoEndpoint, function (outletInfo) {
                console.log('Received data:', outletInfo); // Logs the received data.

                // Set the outlet name in the title
                if (outletInfo && outletInfo.customerFacingName) {
                    console.log('Setting customerFacingName:', outletInfo.customerFacingName); // Logs the name being set.
                    $("#outlet-name").text(outletInfo.customerFacingName);
                } else {
                    console.error('customerFacingName not found or is undefined in the received data');
                }

                if (outletInfo && outletInfo.logo) {
                    const logoBase64 = outletInfo.logo;
                    console.log('Setting Logo:', logoBase64.substring(0, 100) + '...'); // Logs the first 100 characters of the logo data for brevity.

                    $("#outlet-logo").attr('src', `data:image/png;base64,${logoBase64}`)
                        .attr('alt', `${outletInfo.customerFacingName} Logo`)
                        .show();
                } else {
                    console.error("Logo data is undefined or empty");
                }
            })
                .fail(function (jqXHR, textStatus, errorThrown) {
                    console.log("Request failed for outlet info:", textStatus, errorThrown);
                });
        }


        // Initially populate the menu items
        fetchAndDisplayMenuItems();
        // Add this line
        fetchAndDisplayOutletInfo();
    });
    $('#menu-container').on('click', '.card', function () {
        const itemId = $(this).data('item-id');
        const outletId = $(this).data('outlet-id');
        const tableId = $(this).data('table-id');
        const customerFacingName = $("#outlet-name").text(); // Get the customerFacingName

        $.post('/Order/RedirectToDetail', {
            itemId: itemId,
            outletId: outletId,
            tableId: tableId,
            name: customerFacingName // Send the customerFacingName
        }).done(function (response) {
            if (response.success) {
                window.location.href = response.redirectUrl; // assuming your controller action returns the URL to redirect to
            } else {
                console.error("Failed to redirect");
            }
        });
    });


</script>
<script>
    // Cart functions
    function updateCartButton() {
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        let itemCount = cart.reduce((count, item) => count + item.qty, 0);
        let total = cart.reduce((total, item) => total + (item.price * item.qty), 0).toFixed(2);

        $("#cart-items-count").text(itemCount);
        $("#cart-total").text(total);

        if (itemCount > 0) {
            $('#cart-button').show();
        } else {
            $('#cart-button').hide();
        }
    }

    // This will be called when an item is added to the cart
    function addToCart(item) {
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        let existingItem = cart.find(x => x.id === item.id);
        if (existingItem) {
            existingItem.qty += item.qty;
        } else {
            cart.push(item);
        }
        localStorage.setItem('cart', JSON.stringify(cart));
        updateCartButton();
    }

    // For the Food Item page
    $('#order-button').click(function () {
        const qty = parseInt($('#quantity-selector').val());
        const price = parseFloat($('h2 span').text().replace('LKR', '').trim());
        const name = $('h2').text().split(' ')[0]; // assuming the name is the first word

        addToCart({
            id: '@ViewBag.ItemId'.toString(),
            name: name,
            qty: qty,
            price: price
        });
    });
    $('#cart-button').click(function () {
        window.location.href = '/Order/Checkout';
    });
    // Initialization
    $(document).ready(function () {
        updateCartButton();
    });

</script>
